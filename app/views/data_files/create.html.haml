- content_for :breadcrumb  do
  %h1 Data / Upload

.container
  .alert.alert-success
    Your files have been uploaded. Below you can modify the information about individual files if you wish.
  = form_tag(bulk_update_data_files_path, :method => :put) do
    - @uploaded_files.each do |file|
      .file-panel{:id => "file_panel_#{file.id}"}
        %h2{:title => file.filename} #{file.filename}
        %ul
          - if file.messages.is_a? Array
            - file.messages.each do |message_attrs|
              %li.alert{:class => message_attrs[:type]}= message_attrs[:message]
        .control-group
          %label.control-label Type:
          .controls
            .record= "#{file.file_processing_status}"

        .control-group
          = label_tag "file_#{file.id}_experiment", "#{@config.level2}", class: "control-label"
          .controls
            = select_tag "files[#{file.id}][experiment_id]", option_groups_from_collection_for_select(grouped_experiments_for_select, :experiments, :name, :id, :name, file.experiment_id), :id => "file_#{file.id}_experiment"

        .control-group
          = label_tag "file_#{file.id}_description", "Description", class: "control-label"
          .controls
            = text_area_tag "files[#{file.id}][file_processing_description]", file.file_processing_description, :id => "file_#{file.id}_description"

        .control-group
          = label_tag "file_#{file.id}_external_id", "ID", class: "control-label"
          .controls
            = text_field_tag "files[#{file.id}][external_id]", file.external_id, :id => "file_#{file.id}_external_id"

        .control-group#tags
          = label_tag :tags, "Tags", class: "control-label"
          .controls
            - if tags.empty?
              .record None
            - tags.each do |tag|
              .record.checkbox
                = check_box_tag "files[#{file.id}][tag_ids][]", tag.id, file.tag_ids.include?(tag.id), :id => "file_#{file.id}_tag_#{tag.id}"
                = label_tag "file_#{file.id}_tag_#{tag.id}", tag.name, :class => 'tag', :title => tag.name
        .control-group#labels
          = label_tag "files[#{file.id}][label_list]", "Labels:", class: "control-label"
          .controls
            = text_field_tag "files[#{file.id}][label_list]", file.labels.pluck(:name).join(','), :class => 'select2_labels', data: {labels: labels}

        - unless file.time_parsable?
          .control-group
            .date-format yyyy-mm-dd
          .control-group
            = label_tag "file_#{file.id}_start_time", "Start Time", class: "control-label"
            .controls
              = text_field_tag "files[#{file.id}][start_time]", @start_time, :id => "file_#{file.id}_start_time", :datepicker => true
              .hidden{:id => "file_#{file.id}_start_container"}
                = select_hour @start_time, {:field_name => "files[#{file.id}][start_hr]"}, {:id => "file_#{file.id}_start_hr"}
                = select_minute @start_time, {:field_name => "files[#{file.id}][start_min]"}, {:id => "file_#{file.id}_start_min"}
                = select_second @start_time, {:field_name => "files[#{file.id}][start_sec]"}, {:id => "file_#{file.id}_start_sec"}
          .control-group
            = label_tag "file_#{file.id}_end_time", "End Time", class: "control-label"
            .controls
              = text_field_tag "files[#{file.id}][end_time]", @end_time, :id => "file_#{file.id}_end_time", :datepicker => true
              .hidden{:id => "file_#{file.id}_end_container"}
                = select_hour @end_time, {:field_name => "files[#{file.id}][end_hr]"}, {:id => "file_#{file.id}_end_hr"}
                = select_minute @end_time, {:field_name => "files[#{file.id}][end_min]"}, {:id => "file_#{file.id}_end_min"}
                = select_second @end_time, {:field_name => "files[#{file.id}][end_sec]"}, {:id => "file_#{file.id}_end_sec"}

        %h2 New File Relationships
        .control-group
          = label_tag "experiment_id_#{file.id}", "Filter Files", class: "control-label"
          .controls
            = select_tag "experiment_id_#{file.id}", option_groups_from_collection_for_select(grouped_experiments_for_select, :experiments, :name, :id, :name, file.experiment_id), file_id: file.id
            %br/
            Filter data files by #{@config.level2.downcase}
        .control-group
          = label_tag "parent_ids_#{file.id}", "Parents", class: "control-label"
          .controls
            = hidden_field_tag "parent_ids_#{file.id}", nil, data: {placeholder: 'Select parent data files...', values: file.parents.relationship_fields, children: file.child_ids}, name: "files[#{file.id}][parent_ids]"
    .form-actions
      .actions
        = submit_tag "Update"

:javascript
  $('.select2_labels').select2({
    minimumInputLength: 3,
    tags: $('.select2_labels').data('labels'),
    tokenSeparators: ['|'],
    separator: '|'
  });

  ////////// Parents are initially the same //////////
  var interim_data = {};
  var DC21 = {preload_data: []};

  ////////// PARENT 'CLASS' //////////
  function Parent($id) {
    var file_id = $id.attr('file_id');

    ////////// START PARENTS //////////
    var $parent_selector = $('#parent_ids_' + file_id);
    var parents = $parent_selector.data('values');

    ////////// TRACK INVALID DATA FILES //////////
    var invalid_dfs = _.map($parent_selector.data('children'), function(id){
                return id.toString();
              });

    $parent_selector.select2({
      minimumInputLength: 3,
      multiple: true,
      query: function (query){
          var data = {results: []};

          $.each(DC21.preload_data, function(){
            if (data.results.length >= 100) {
              return false;
            }
            if (validDataFile(this.id) && this.exp_id.toString() == $id.val()){
              if(query.term.length == 0 || this.text.toUpperCase().indexOf(query.term.toUpperCase()) >= 0){
                  data.results.push({id: this.id, text: this.text });
              }
            }
          });
          query.callback(data);
      }
    });

    $parent_selector.on('select2-selecting', function(event){
      // Reference to the parent object of the specified ID
      // only when it is part of the set of uploaded data files
      // console.log("Focused object : " + invalid_dfs);
      var id = event.val;
      if ($.inArray(id, uploaded_data_files) && parent_objects[id] != null) {
        parent_objects[id].data_file.set_invalid(file_id);
      }
    });

    $parent_selector.on('select2-removed', function(event){
      var id = event.val;
      if ($.inArray(id, uploaded_data_files) && parent_objects[id] != null) {
        parent_objects[id].data_file.remove_invalid(file_id);
      }
    });

    function removeFromSelected(id) {
      invalid_dfs = $.grep(invalid_dfs, function(value) {
        return value != id
      });
    }

    function validDataFile(id) {
      // Merge selected data files with the current file id as invalid data files for select
      invalid = _.union(file_id, invalid_dfs);
      $.merge(invalid, $parent_selector.val().split(",") || []);
      $.unique(invalid);
      return $.inArray(id.toString(), invalid) == -1;
    }

    $parent_selector.select2('data', parents);

    ////////// SET/REMOVE INVALID LIST //////////
    this.set_invalid = function(id) {
      $.merge(invalid_dfs, [id] || []);
      // console.log("Referenced object : " + invalid_dfs);
    }

    this.remove_invalid = function(id) {
      removeFromSelected(id);
    }

    ////////// ON CHANGE EXPERIMENT //////////
    $id.change(function() {
      var exp_id = $id.val();
      if ($.inArray(exp_id.toString(), _.keys(_.indexBy(DC21.preload_data,'exp_id'))) == -1) {
        $id.attr('disabled', true);
        $parent_selector.select2('enable', false);
        $.post("/data_files/api_search.json", { experiments: [exp_id] }, function(data) {
          var new_data = _.map(data, function(df){
            return {id: df.file_id, exp_id: df.experiment_id, text: df.filename};
          });

          interim_data = _.indexBy(_.union(DC21.preload_data, new_data), 'id')
          DC21.preload_data = _.sortBy(_.values(interim_data), 'text');
          $id.removeAttr('disabled');
          $parent_selector.select2('enable', true);
        },
        "json");
      }
    });
    $id.change();
  }

  ////////// INIT //////////
  parent_objects = {}
  uploaded_data_files = [];
  $('select[id^="experiment_id_"]').each(function(index) {
    parent = new Parent($(this));

    // Set reference by string for parent objects
    file_id = $(this).attr('file_id');
    uploaded_data_files.push(file_id);
    parent_objects[file_id] = { 'data_file' : parent };
  });

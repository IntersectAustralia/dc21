- content_for :breadcrumb  do
  Data / Edit / #{@data_file.filename}



.container
  - if @data_file.published? and !can?(:read, User)
    You do not have permission to edit this published file.
  - else
    = form_for (@data_file) do |f|
      %h2{:title => @data_file.filename} Editing Metadata of #{@data_file.filename}
      = render "shared/error_messages", :target => @data_file
      .control-group
        -if @data_file.is_package?
          .control-label Name
          .controls
            .record
              = @data_file.filename
        -else
          %label.control-label{ :for => :data_file_filename } Name
          .controls
            = required
            = f.text_field :filename

      - if @data_file.is_package?
        .control-group
          .control-label Title
          .controls
            = required
            = f.text_area :title

      .control-group
        - if @data_file.is_raw_file? or @data_file.is_package?
          .control-label File type
          .controls
            .record
              = @data_file.file_processing_status
        - else
          %label.control-label{:for => :file_processing_status} File type
          .controls
            .record
              = required
              = f.select :file_processing_status, options_for_select(DataFile::STATI_FOR_EDIT, @data_file.file_processing_status), :include_blank => true

      .control-group
        .control-label File Format
        .controls
          .record
          = @data_file.format

      .control-group
        %label.control-label{:for => :data_file_experiment_id} #{@config.level2}
        .controls
          = required
          = f.select :experiment_id, option_groups_from_collection_for_select(grouped_experiments_for_select, :experiments, :name, :id, :name, @data_file.experiment_id), :include_blank => true

      .control-group
        %label.control-label{:for => :data_file_file_processing_description} Description
        .controls
          = f.text_area :file_processing_description

      - unless @data_file.is_toa5?
        .control-group
          .date-format yyyy-mm-dd
        .control-group
          = label_tag "data_file_start_time", "Start Time", class: "control-label", :for => "file_#{@data_file.id}_start_time"
          .controls
            - if @data_file.start_time_is_not_nil?
              = text_field_tag "date[start_time]", @data_file.start_time.utc.to_date,  :id => "file_#{@data_file.id}_start_time", :datepicker => true
              .show{:id => "file_#{@data_file.id}_start_container"}
                = select_hour @data_file.start_time.utc, {:field_name => "start_hr"}, {:id => "start_hr"}
                = select_minute @data_file.start_time.utc, {:field_name => "start_min"}, {:id => "start_min"}
                = select_second @data_file.start_time.utc, {:field_name => "start_sec"}, {:id => "start_sec"}
            - else
              = text_field_tag "date[start_time]", @data_file.start_time, :id => "file_#{@data_file.id}_start_time", :datepicker => true
              .hidden{:id => "file_#{@data_file.id}_start_container"}
                = select_hour @data_file.start_time, {:field_name => "start_hr"}
                = select_minute @data_file.start_time, {:field_name => "start_min"}
                = select_second @data_file.start_time, {:field_name => "start_sec"}
        .control-group
          = label_tag "data_file_end_time", "End Time", class: "control-label", :for => "file_#{@data_file.id}_end_time"
          .controls
            -if @data_file.end_time_is_not_nil?
              = text_field_tag "date[end_time]", @data_file.end_time.utc.to_date, :id => "file_#{@data_file.id}_end_time", :datepicker => true
              .show{:id => "file_#{@data_file.id}_end_container"}
                = select_hour @data_file.end_time.utc, {:field_name => "end_hr"}
                = select_minute @data_file.end_time.utc, {:field_name => "end_min"}
                = select_second @data_file.end_time.utc, {:field_name => "end_sec"}
            - else
              = text_field_tag "date[end_time]", @data_file.end_time, :id => "file_#{@data_file.id}_end_time", :datepicker => true
              .hidden{:id => "file_#{@data_file.id}_end_container"}
                = select_hour @data_file.end_time, {:field_name => "end_hr"}
                = select_minute @data_file.end_time, {:field_name => "end_min"}
                = select_second @data_file.end_time, {:field_name => "end_sec"}

      .control-group
        - if @data_file.is_package?
          .control-label ID
          .record.controls
            = @data_file.external_id
        - else
          %label.control-label{ :for => :data_file_external_id} ID
          .controls
            = f.text_field :external_id

      %h2{:title => @data_file.filename}
      .control-group#tags
        .control-label Tags
        .controls
          - if tags.empty?
            .record None
          - tags.each do |tag|
            .record.checkbox
              = check_box_tag "tags[]", tag.id, @data_file.tag_ids.include?(tag.id), :id => "tag_#{tag.id}"
              = label_tag "tag_#{tag.id}", tag.name, :class => 'tag', :title => tag.name
      .control-group#labels
        %label.control-label{:for => :data_file_label_list} Labels
        .controls
          = f.text_field :label_list, data: {labels: labels}

      - if @data_file.is_package?
        .control-group#grant-numbers
          %label.control-label{:for => :data_file_grant_number_list} Grant Numbers
          .controls
            = f.text_field :grant_number_list, data: {labels: grant_numbers}
        .control-group#related-websites
          %label.control-label{:for => :data_file_related_website_list} Related Websites
          .controls
            = f.text_field :related_website_list, data: {labels: related_websites}
        %h2{:title => @data_file.filename}
        .control-group
          .control-label Access Rights Type
          .controls
            = required
            = f.select :access_rights_type, Package::ACCESS_RIGHTS_TYPES
        .control-group
          .control-label Licence
          .controls
            = required
            %span.input
              = f.select :license, options_for_select(access_rights.collect{|ar| [ar[:name], ar[:url]]}, @data_file.license), {:include_blank => ""}
        .control-group
          .control-label Rights Statement
          .controls
            .record
              = @data_file.rights_statement
        %h2{:title => @data_file.filename}
        .control-group
          .control-label Language
          .controls
            .record
              = @data_file.language.try(:language_name)
        .control-group
          .control-label Physical Location
          .controls
            .record
              = @data_file.physical_location
        .control-group
          .control-label Research Centre Name
          .controls
            .record
              = @data_file.research_centre_name
        %h2{:title => @data_file.filename}
        .control-group
          .control-label HDL Handle
          .controls
            .record
              = @data_file.hdl_handle

      .control-group
        .control-label Date Added
        .controls
          .record
            = @data_file.created_at.to_s(:with_time)
      .control-group
        .control-label Added By
        .controls
          .record
            = (@data_file.created_by ? @data_file.created_by.email : "")

      %h2{:title => @data_file.filename} Access Control for #{@data_file.filename}
      .control-group
        = f.label :access, "Public", class: "control-label", :for => "public_access_radio_button"
        .controls
          = f.radio_button :access, "Public", id: "public_access_radio_button"
      .control-group
        = f.label :access, "Private", class: "control-label", :for => "private_access_radio_button"
        .controls
          = f.radio_button :access, "Private", id: "private_access_radio_button"
        .controls#private_access_options
          .record.checkbox
            = f.check_box :access_to_all_institutional_users, {id: "all_institutional_users"}, "true", "false"
            = label_tag "inst_users", "All Institutional Users", :class => 'tag', :title => "All Institutional Users", :for => "all_institutional_users"
          .record.checkbox
            = f.check_box :access_to_user_groups, {id: "users_in_groups"}, "true", "false"
            = label_tag "non_inst_users", "Users in Groups", :class => 'tag', :title => "Users in Groups", :for => "users_in_groups"
        .control-group#user_groups_list
          = f.label :groups, "Groups", :for => "s2id_autogen1"
          .controls
            = f.collection_select(:access_groups, AccessGroup.find_all_by_status(true), :id, :name, {:selected => @data_file.access_groups.find_all_by_status(true).collect {|ag| ag.id}}, {:multiple => true})


      %h2{:title => @data_file.filename} Editing File Relationships of #{@data_file.filename}
      .control-group
        = label_tag "experiment_id", "Filter Files", class: "control-label"
        .controls
          = select_tag "experiment_id", option_groups_from_collection_for_select(grouped_experiments_for_select, :experiments, :name, :id, :name, @data_file.experiment_id)
          %br/
          Filter data files by #{@config.level2.downcase}
      .control-group
        = f.label :parent_ids, "Parents", class: "control-label"
        .controls
          = f.hidden_field :parent_ids, value: nil, data: {placeholder: 'Select parent data files...', values: @data_file.parents.relationship_fields}, class: "file_relation_select"
      .control-group
        = f.label :child_ids, "Children", class: "control-label"
        .controls
          = f.hidden_field :child_ids, value: nil, data: {placeholder: 'Select child data files...', values: @data_file.children.relationship_fields}, class: "file_relation_select"

      .form-actions
        .actions-pre
          = cancel_button "Cancel", data_files_path
        .actions
          = f.submit "Update", :confirm => @data_file.published? ? "These changes will not affect the underlying RIF-CS. To modify the metadata in the RIF-CS, you will need to create a new package." : nil

:javascript
  $(document).ready(function(){
      var privateAccessIsChecked = $('#private_access_radio_button').is(":checked");
      showPrivateAccessOptions(privateAccessIsChecked);
    });

  $('#data_file_access_groups').select2();
  
  $('#data_file_label_list').select2({
    minimumInputLength: 3,
    tags: $('#data_file_label_list').data('labels'),
    tokenSeparators: ['|'],
    separator: '|'
  });

  $('#data_file_grant_number_list').select2({
    minimumInputLength: 3,
    tags: $('#data_file_grant_number_list').data('labels'),
    tokenSeparators: ['|'],
    separator: '|'
  });

  $('#data_file_related_website_list').select2({
    minimumInputLength: 3,
    tags: $('#data_file_related_website_list').data('labels'),
    tokenSeparators: ['|'],
    separator: '|'
  });

  var invalid = ["#{@data_file.id}"];
  var parents = $('#data_file_parent_ids').data('values');
  var children = $('#data_file_child_ids').data('values');


  var interim_data = {};
  var DC21 = {preload_data: []};

  $('#experiment_id').change(function() {
    var exp_id = $('#experiment_id').val();
    if ($.inArray(exp_id.toString(), _.keys(_.indexBy(DC21.preload_data,'exp_id'))) == -1) {

      $('#experiment_id').attr('disabled', true);
      $('.file_relation_select').select2("enable", false);
      $.post( "/data_files/api_search.json", { experiments: [exp_id] }, function( data ) {
        var new_data = _.map(data, function(df){
                         return {id: df.file_id, exp_id: df.experiment_id, text: df.filename};
                       });
        interim_data = _.indexBy(_.union(DC21.preload_data, new_data), 'id')
        DC21.preload_data = _.sortBy(_.values(interim_data), 'text');
        $('.file_relation_select').select2("enable", true);
        $('#experiment_id').removeAttr('disabled');
      }, "json");
    }
  });

  $('#experiment_id').change();

  $('.file_relation_select').select2({
    minimumInputLength: 3,
    multiple: true,
    query: function (query){
        var data = {results: []};

        $.each(DC21.preload_data, function(){
          if (data.results.length >= 100) {
            return false;
          }
          if (validDataFile(this.id) && this.exp_id.toString() == $('#experiment_id').val()){
            if(query.term.length == 0 || this.text.toUpperCase().indexOf(query.term.toUpperCase()) >= 0  ){
                data.results.push({id: this.id, text: this.text });
            }
          }
        });

        query.callback(data);
    }
  });

  $('#data_file_parent_ids').select2('data', parents);
  $('#data_file_child_ids').select2('data', children);

  $('#public_access_radio_button').click(function(){
    if($(this).is(":checked"))
    {
      showPrivateAccessOptions(false);
    }
  });

  $('#private_access_radio_button').click(function(){
    if($(this).is(":checked"))
    {
      showPrivateAccessOptions(true);
    }
  });

  $('#users_in_groups').click(function(){
    showUserGroupsList();
  });

  function validDataFile(id) {
    invalid = ["#{@data_file.id}"];
    $.merge(invalid, $('#data_file_child_ids').val().split(",") || []);
    $.merge(invalid, $('#data_file_parent_ids').val().split(",") || []);
    $.unique(invalid);
    return $.inArray(id.toString(), invalid) == -1;
  }

  function showPrivateAccessOptions(showOptions)
  {
    if(showOptions)
    {   //show checkboxes
      $('#private_access_options').show();
    }
    else if(!showOptions)
    {   //hide and uncheck checkboxes
      $('#private_access_options').find('input[type=checkbox]:checked').removeAttr('checked');
      $('#private_access_options').hide();
    }
    showUserGroupsList();
  }

  function showUserGroupsList()
  {
    $('#users_in_groups').is(':checked') ? $('#user_groups_list').show() : $('#user_groups_list').hide();
    //MAY ALSO NEED TO CLEAR THE SELECTED VALUES IF IT IS NOT CHECKED
  }

- content_for :breadcrumb  do
  %h1 Data / Upload

.container
  .alert.alert-info Begin by entering the following information about the files to be uploaded. You can override this for individual files at the next step.
  = form_for(@data_file, :html => {:multipart => true}) do |f|
    %h2 New Data Files
    = render "shared/error_messages", :target => @data_file
    .control-group
      = label_tag :file_processing_status, "File type", class: "control-label"
      .controls
        = required
        = select_tag :file_processing_status, options_for_select(DataFile::STATI, @data_file.file_processing_status), :include_blank => true
    .control-group
      = label_tag :data_file_experiment_id, "#{@config.level2}", class: "control-label"
      .controls
        = required
        = f.select :experiment_id, option_groups_from_collection_for_select(grouped_experiments_for_select, :experiments, :name, :id, :name, @data_file.experiment_id), :include_blank => true
    .control-group
      = label_tag :description, "Description", class: "control-label"
      .controls
        = text_area_tag :description, @data_file.file_processing_description
    .control-group#tags
      .control-label Tags
      .controls
        - if tags.empty?
          .record None
        - tags.each do |tag|
          .record.checkbox
            = check_box_tag "tags[]", tag.id, @data_file.tag_ids.include?(tag.id), :id => "tag_#{tag.id}"
            = label_tag "tag_#{tag.id}", tag.name, :class => 'tag', :title => tag.name
    .control-group#labels
      %label.control-label{:for => :data_file_label_list} Labels
      .controls
        = f.text_field :label_list, data: {labels: labels}
    .control-group#files_input
      = label_tag "files_field_0", "Select file(s)", class: "control-label"
      .controls
        = required
        = file_field_tag "files[]", {:id => "files_field_0", :multiple => "multiple"}

    %h2 New File Relationships
    .control-group
      = label_tag "experiment_id", "Filter Files", class: "control-label"
      .controls
        = select_tag 'experiment_id', option_groups_from_collection_for_select(grouped_experiments_for_select, :experiments, :name, :id, :name, nil)
        %br/
        Filter data files by #{@config.level2.downcase}
    .control-group
      = f.label :parent_ids, "Parents", class: "control-label"
      .controls
        = f.hidden_field :parent_ids, value: nil, data: {placeholder: 'Select parent data files...'}, class: "file_relation_select"

    .form-actions
      .actions
        = f.submit "Upload", :class => 'btn'

:javascript
  $('#data_file_label_list').select2({
    minimumInputLength: 3,
    tags: $('#data_file_label_list').data('labels'),
    tokenSeparators: ['|'],
    separator: '|'
  });

  var parents = [];
  var interim_data = {};

  var DC21 = {preload_data: []};

  $('#experiment_id').change(function() {
    var exp_id = $('#experiment_id').val();
    if ($.inArray(exp_id.toString(), _.keys(_.indexBy(DC21.preload_data,'exp_id'))) == -1) {
      $('#experiment_id').attr('disabled', true);
      $('.file_relation_select').select2("enable", false);
      $.post( "/data_files/api_search.json", { experiments: [exp_id] }, function( data ) {
        var new_data = _.map(data, function(df){
                         return {id: df.file_id, exp_id: df.experiment_id, text: df.filename};
                       });
        interim_data = _.indexBy(_.union(DC21.preload_data, new_data), 'id')
        DC21.preload_data = _.sortBy(_.values(interim_data), 'text');
        $('.file_relation_select').select2("enable", true);
        $('#experiment_id').removeAttr('disabled');
      }, "json");
    }
  });

  $('#experiment_id').change()

  $('.file_relation_select').select2({
    minimumInputLength: 3,
    multiple: true,
    query: function (query){
      var data = {results: []};
      $.each(DC21.preload_data, function(){

        if (data.results.length >= 100) {
          return false;
        }
        if (this.exp_id.toString() == $('#experiment_id').val()){
          if(query.term.length == 0 || this.text.toUpperCase().indexOf(query.term.toUpperCase()) >= 0  ){
              data.results.push({id: this.id, text: this.text });
          }
        }
      });

      query.callback(data);
    }
  });


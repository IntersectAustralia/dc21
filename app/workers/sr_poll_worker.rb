#!/usr/bin/ruby -w

class SRPollWorker
  include Resque::Plugins::Status

  @queue = :sr_poll

  def perform
    output_file = DataFile.find(options['output_id'])
    parent = DataFile.find(options['parent_id'])
    media_id = options['media_id']
    process_id = options['process_id']

    @config = SystemConfiguration.instance
    begin
      if [@config.sr_cloud_host, @config.sr_cloud_id, @config.sr_cloud_token].all?(&:present?)

        url = "https://#{CGI.escape(@config.sr_cloud_id)}:#{CGI.escape(@config.sr_cloud_token)}@#{@config.sr_cloud_host}/REST"

        require "rest_client"

        require "rexml/document"

        def output_response_error(e)
          Rails.logger.error e.message
          Rails.logger.error e.backtrace.join("\n")
          xml_data = REXML::Document.new(e.response)
          raise "#{e.message}. Please contact an administrator."
        end

        def humanize(secs)
          [[60, :seconds], [60, :minutes], [24, :hours], [1000, :days]].map{ |count, name|
            if secs > 0
              secs, n = secs.divmod(count)
              "#{n.to_i} #{name}"
            end
          }.compact.reverse.join(' ')
        end

        begin
          response = RestClient.get("#{url}/media/#{media_id}")
          media_xml = REXML::Document.new(response)
          transcript_id = media_xml.root.elements['currentTranscript/id'].try(:text)

          if transcript_id
            recognized_text = RestClient.get("#{url}/transcripts/#{transcript_id}.txt")
            File.open(output_file.path, "w:UTF-8") {|f| f.write(recognized_text.encode('UTF-8', {:invalid => :replace, :undef => :replace, :replace => ""})) }

            output_file.mark_as_complete
            output_file.file_processing_description = "This file was automatically generated by SR (Koemei).\n" <<
            "Source file name: #{parent.filename}\n" <<
            "Source file id: #{output_file.id}\n" <<
            "Length: #{humanize(media_xml.elements['mediaItem/size'].text.to_i)}\n"

            output_file.file_size = File.size(output_file.path)
            output_file.save
            Notifier.notify_user_of_completed_processing(output_file).deliver
          else
            Rails.logger.info "Polling again in 15 seconds"
            sleep(15)
            #Add delay before running next poller
            SRPollWorker.create({output_id: output_file.id, parent_id: parent.id, media_id: media_id})
          end

        rescue RestClient::ExceptionWithResponse => e
          output_response_error(e)
        end

      else
        raise "Koemei account details have not been completely specified."
      end

    rescue Exception => e
      output_file.mark_as_failed
      # Catch exception, set transfer status and rethrow so we can see what went wrong in the overview page
      output_file.file_processing_description = "SR ERROR: #{e.message}"
      output_file.file_processing_status = DataFile::STATUS_ERROR
      output_file.save
      Rails.logger.info "SR ERROR: #{e.message}"
      raise e
    end
  end

end




